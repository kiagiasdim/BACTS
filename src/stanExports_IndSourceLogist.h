// Generated by rstantools.  Do not edit by hand.

/*
    BACTS is free software: you can redistribute it and/or modify
    it under the terms of the GNU General Public License as published by
    the Free Software Foundation, either version 3 of the License, or
    (at your option) any later version.

    BACTS is distributed in the hope that it will be useful,
    but WITHOUT ANY WARRANTY; without even the implied warranty of
    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
    GNU General Public License for more details.

    You should have received a copy of the GNU General Public License
    along with BACTS.  If not, see <http://www.gnu.org/licenses/>.
*/
#ifndef MODELS_HPP
#define MODELS_HPP
#define STAN__SERVICES__COMMAND_HPP
#include <rstan/rstaninc.hpp>
// Code generated by Stan version 2.21.0
#include <stan/model/model_header.hpp>
namespace model_IndSourceLogist_namespace {
using std::istream;
using std::string;
using std::stringstream;
using std::vector;
using stan::io::dump;
using stan::math::lgamma;
using stan::model::prob_grad;
using namespace stan::math;
static int current_statement_begin__;
stan::io::program_reader prog_reader__() {
    stan::io::program_reader reader;
    reader.add_event(0, 0, "start", "model_IndSourceLogist");
    reader.add_event(38, 36, "end", "model_IndSourceLogist");
    return reader;
}
#include <stan_meta_header.hpp>
class model_IndSourceLogist
  : public stan::model::model_base_crtp<model_IndSourceLogist> {
private:
        int m;
        int p;
        std::vector<int> y;
        matrix_d X;
        double tau;
        double a_omega;
        double b_omega;
        vector_d eta;
        matrix_d I;
public:
    model_IndSourceLogist(stan::io::var_context& context__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, 0, pstream__);
    }
    model_IndSourceLogist(stan::io::var_context& context__,
        unsigned int random_seed__,
        std::ostream* pstream__ = 0)
        : model_base_crtp(0) {
        ctor_body(context__, random_seed__, pstream__);
    }
    void ctor_body(stan::io::var_context& context__,
                   unsigned int random_seed__,
                   std::ostream* pstream__) {
        typedef double local_scalar_t__;
        boost::ecuyer1988 base_rng__ =
          stan::services::util::create_rng(random_seed__, 0);
        (void) base_rng__;  // suppress unused var warning
        current_statement_begin__ = -1;
        static const char* function__ = "model_IndSourceLogist_namespace::model_IndSourceLogist";
        (void) function__;  // dummy to suppress unused var warning
        size_t pos__;
        (void) pos__;  // dummy to suppress unused var warning
        std::vector<int> vals_i__;
        std::vector<double> vals_r__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        try {
            // initialize data block variables from context__
            current_statement_begin__ = 2;
            context__.validate_dims("data initialization", "m", "int", context__.to_vec());
            m = int(0);
            vals_i__ = context__.vals_i("m");
            pos__ = 0;
            m = vals_i__[pos__++];
            check_greater_or_equal(function__, "m", m, 1);
            current_statement_begin__ = 3;
            context__.validate_dims("data initialization", "p", "int", context__.to_vec());
            p = int(0);
            vals_i__ = context__.vals_i("p");
            pos__ = 0;
            p = vals_i__[pos__++];
            current_statement_begin__ = 4;
            validate_non_negative_index("y", "m", m);
            context__.validate_dims("data initialization", "y", "int", context__.to_vec(m));
            y = std::vector<int>(m, int(0));
            vals_i__ = context__.vals_i("y");
            pos__ = 0;
            size_t y_k_0_max__ = m;
            for (size_t k_0__ = 0; k_0__ < y_k_0_max__; ++k_0__) {
                y[k_0__] = vals_i__[pos__++];
            }
            size_t y_i_0_max__ = m;
            for (size_t i_0__ = 0; i_0__ < y_i_0_max__; ++i_0__) {
                check_greater_or_equal(function__, "y[i_0__]", y[i_0__], 0);
                check_less_or_equal(function__, "y[i_0__]", y[i_0__], 1);
            }
            current_statement_begin__ = 5;
            validate_non_negative_index("X", "m", m);
            validate_non_negative_index("X", "p", p);
            context__.validate_dims("data initialization", "X", "matrix_d", context__.to_vec(m,p));
            X = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(m, p);
            vals_r__ = context__.vals_r("X");
            pos__ = 0;
            size_t X_j_2_max__ = p;
            size_t X_j_1_max__ = m;
            for (size_t j_2__ = 0; j_2__ < X_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < X_j_1_max__; ++j_1__) {
                    X(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            current_statement_begin__ = 6;
            context__.validate_dims("data initialization", "tau", "double", context__.to_vec());
            tau = double(0);
            vals_r__ = context__.vals_r("tau");
            pos__ = 0;
            tau = vals_r__[pos__++];
            check_greater_or_equal(function__, "tau", tau, 0);
            current_statement_begin__ = 7;
            context__.validate_dims("data initialization", "a_omega", "double", context__.to_vec());
            a_omega = double(0);
            vals_r__ = context__.vals_r("a_omega");
            pos__ = 0;
            a_omega = vals_r__[pos__++];
            check_greater_or_equal(function__, "a_omega", a_omega, 0);
            current_statement_begin__ = 8;
            context__.validate_dims("data initialization", "b_omega", "double", context__.to_vec());
            b_omega = double(0);
            vals_r__ = context__.vals_r("b_omega");
            pos__ = 0;
            b_omega = vals_r__[pos__++];
            check_greater_or_equal(function__, "b_omega", b_omega, 0);
            current_statement_begin__ = 9;
            validate_non_negative_index("eta", "p", p);
            context__.validate_dims("data initialization", "eta", "vector_d", context__.to_vec(p));
            eta = Eigen::Matrix<double, Eigen::Dynamic, 1>(p);
            vals_r__ = context__.vals_r("eta");
            pos__ = 0;
            size_t eta_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < eta_j_1_max__; ++j_1__) {
                eta(j_1__) = vals_r__[pos__++];
            }
            current_statement_begin__ = 10;
            validate_non_negative_index("I", "p", p);
            validate_non_negative_index("I", "p", p);
            context__.validate_dims("data initialization", "I", "matrix_d", context__.to_vec(p,p));
            I = Eigen::Matrix<double, Eigen::Dynamic, Eigen::Dynamic>(p, p);
            vals_r__ = context__.vals_r("I");
            pos__ = 0;
            size_t I_j_2_max__ = p;
            size_t I_j_1_max__ = p;
            for (size_t j_2__ = 0; j_2__ < I_j_2_max__; ++j_2__) {
                for (size_t j_1__ = 0; j_1__ < I_j_1_max__; ++j_1__) {
                    I(j_1__, j_2__) = vals_r__[pos__++];
                }
            }
            // initialize transformed data variables
            // execute transformed data statements
            // validate transformed data
            // validate, set parameter ranges
            num_params_r__ = 0U;
            param_ranges_i__.clear();
            current_statement_begin__ = 14;
            validate_non_negative_index("beta", "(p - 1)", (p - 1));
            num_params_r__ += (p - 1);
            current_statement_begin__ = 15;
            num_params_r__ += 1;
            current_statement_begin__ = 16;
            num_params_r__ += 1;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    ~model_IndSourceLogist() { }
    void transform_inits(const stan::io::var_context& context__,
                         std::vector<int>& params_i__,
                         std::vector<double>& params_r__,
                         std::ostream* pstream__) const {
        typedef double local_scalar_t__;
        stan::io::writer<double> writer__(params_r__, params_i__);
        size_t pos__;
        (void) pos__; // dummy call to supress warning
        std::vector<double> vals_r__;
        std::vector<int> vals_i__;
        current_statement_begin__ = 14;
        if (!(context__.contains_r("beta")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable beta missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("beta");
        pos__ = 0U;
        validate_non_negative_index("beta", "(p - 1)", (p - 1));
        context__.validate_dims("parameter initialization", "beta", "row_vector_d", context__.to_vec((p - 1)));
        Eigen::Matrix<double, 1, Eigen::Dynamic> beta((p - 1));
        size_t beta_j_1_max__ = (p - 1);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            beta(j_1__) = vals_r__[pos__++];
        }
        try {
            writer__.row_vector_unconstrain(beta);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable beta: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 15;
        if (!(context__.contains_r("mu")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable mu missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("mu");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "mu", "double", context__.to_vec());
        double mu(0);
        mu = vals_r__[pos__++];
        try {
            writer__.scalar_unconstrain(mu);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable mu: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        current_statement_begin__ = 16;
        if (!(context__.contains_r("omega")))
            stan::lang::rethrow_located(std::runtime_error(std::string("Variable omega missing")), current_statement_begin__, prog_reader__());
        vals_r__ = context__.vals_r("omega");
        pos__ = 0U;
        context__.validate_dims("parameter initialization", "omega", "double", context__.to_vec());
        double omega(0);
        omega = vals_r__[pos__++];
        try {
            writer__.scalar_lb_unconstrain(0, omega);
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(std::runtime_error(std::string("Error transforming variable omega: ") + e.what()), current_statement_begin__, prog_reader__());
        }
        params_r__ = writer__.data_r();
        params_i__ = writer__.data_i();
    }
    void transform_inits(const stan::io::var_context& context,
                         Eigen::Matrix<double, Eigen::Dynamic, 1>& params_r,
                         std::ostream* pstream__) const {
      std::vector<double> params_r_vec;
      std::vector<int> params_i_vec;
      transform_inits(context, params_i_vec, params_r_vec, pstream__);
      params_r.resize(params_r_vec.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r(i) = params_r_vec[i];
    }
    template <bool propto__, bool jacobian__, typename T__>
    T__ log_prob(std::vector<T__>& params_r__,
                 std::vector<int>& params_i__,
                 std::ostream* pstream__ = 0) const {
        typedef T__ local_scalar_t__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // dummy to suppress unused var warning
        T__ lp__(0.0);
        stan::math::accumulator<T__> lp_accum__;
        try {
            stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
            // model parameters
            current_statement_begin__ = 14;
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> beta;
            (void) beta;  // dummy to suppress unused var warning
            if (jacobian__)
                beta = in__.row_vector_constrain((p - 1), lp__);
            else
                beta = in__.row_vector_constrain((p - 1));
            current_statement_begin__ = 15;
            local_scalar_t__ mu;
            (void) mu;  // dummy to suppress unused var warning
            if (jacobian__)
                mu = in__.scalar_constrain(lp__);
            else
                mu = in__.scalar_constrain();
            current_statement_begin__ = 16;
            local_scalar_t__ omega;
            (void) omega;  // dummy to suppress unused var warning
            if (jacobian__)
                omega = in__.scalar_lb_constrain(0, lp__);
            else
                omega = in__.scalar_lb_constrain(0);
            // transformed parameters
            current_statement_begin__ = 20;
            validate_non_negative_index("linpred", "m", m);
            Eigen::Matrix<local_scalar_t__, Eigen::Dynamic, 1> linpred(m);
            stan::math::initialize(linpred, DUMMY_VAR__);
            stan::math::fill(linpred, DUMMY_VAR__);
            current_statement_begin__ = 21;
            validate_non_negative_index("betamu", "p", p);
            Eigen::Matrix<local_scalar_t__, 1, Eigen::Dynamic> betamu(p);
            stan::math::initialize(betamu, DUMMY_VAR__);
            stan::math::fill(betamu, DUMMY_VAR__);
            // transformed parameters block statements
            current_statement_begin__ = 23;
            stan::math::assign(betamu, append_col(mu, beta));
            current_statement_begin__ = 24;
            stan::math::assign(linpred, multiply(X, transpose(betamu)));
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            current_statement_begin__ = 20;
            size_t linpred_j_1_max__ = m;
            for (size_t j_1__ = 0; j_1__ < linpred_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(linpred(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: linpred" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable linpred: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            current_statement_begin__ = 21;
            size_t betamu_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < betamu_j_1_max__; ++j_1__) {
                if (stan::math::is_uninitialized(betamu(j_1__))) {
                    std::stringstream msg__;
                    msg__ << "Undefined transformed parameter: betamu" << "(" << j_1__ << ")";
                    stan::lang::rethrow_located(std::runtime_error(std::string("Error initializing variable betamu: ") + msg__.str()), current_statement_begin__, prog_reader__());
                }
            }
            // model body
            current_statement_begin__ = 28;
            lp_accum__.add(gamma_log<propto__>(omega, a_omega, b_omega));
            current_statement_begin__ = 29;
            lp_accum__.add(normal_log<propto__>(mu, get_base1(eta, 1, "eta", 1), (1 / stan::math::sqrt(tau))));
            current_statement_begin__ = 31;
            for (int i = 1; i <= (p - 1); ++i) {
                current_statement_begin__ = 32;
                lp_accum__.add(normal_log<propto__>(get_base1(beta, i, "beta", 1), get_base1(eta, (i + 1), "eta", 1), ((1 / stan::math::sqrt(omega)) * get_base1(I, i, i, "I", 1))));
            }
            current_statement_begin__ = 35;
            lp_accum__.add(bernoulli_logit_log<propto__>(y, linpred));
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
        lp_accum__.add(lp__);
        return lp_accum__.sum();
    } // log_prob()
    template <bool propto, bool jacobian, typename T_>
    T_ log_prob(Eigen::Matrix<T_,Eigen::Dynamic,1>& params_r,
               std::ostream* pstream = 0) const {
      std::vector<T_> vec_params_r;
      vec_params_r.reserve(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        vec_params_r.push_back(params_r(i));
      std::vector<int> vec_params_i;
      return log_prob<propto,jacobian,T_>(vec_params_r, vec_params_i, pstream);
    }
    void get_param_names(std::vector<std::string>& names__) const {
        names__.resize(0);
        names__.push_back("beta");
        names__.push_back("mu");
        names__.push_back("omega");
        names__.push_back("linpred");
        names__.push_back("betamu");
    }
    void get_dims(std::vector<std::vector<size_t> >& dimss__) const {
        dimss__.resize(0);
        std::vector<size_t> dims__;
        dims__.resize(0);
        dims__.push_back((p - 1));
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(m);
        dimss__.push_back(dims__);
        dims__.resize(0);
        dims__.push_back(p);
        dimss__.push_back(dims__);
    }
    template <typename RNG>
    void write_array(RNG& base_rng__,
                     std::vector<double>& params_r__,
                     std::vector<int>& params_i__,
                     std::vector<double>& vars__,
                     bool include_tparams__ = true,
                     bool include_gqs__ = true,
                     std::ostream* pstream__ = 0) const {
        typedef double local_scalar_t__;
        vars__.resize(0);
        stan::io::reader<local_scalar_t__> in__(params_r__, params_i__);
        static const char* function__ = "model_IndSourceLogist_namespace::write_array";
        (void) function__;  // dummy to suppress unused var warning
        // read-transform, write parameters
        Eigen::Matrix<double, 1, Eigen::Dynamic> beta = in__.row_vector_constrain((p - 1));
        size_t beta_j_1_max__ = (p - 1);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            vars__.push_back(beta(j_1__));
        }
        double mu = in__.scalar_constrain();
        vars__.push_back(mu);
        double omega = in__.scalar_lb_constrain(0);
        vars__.push_back(omega);
        double lp__ = 0.0;
        (void) lp__;  // dummy to suppress unused var warning
        stan::math::accumulator<double> lp_accum__;
        local_scalar_t__ DUMMY_VAR__(std::numeric_limits<double>::quiet_NaN());
        (void) DUMMY_VAR__;  // suppress unused var warning
        if (!include_tparams__ && !include_gqs__) return;
        try {
            // declare and define transformed parameters
            current_statement_begin__ = 20;
            validate_non_negative_index("linpred", "m", m);
            Eigen::Matrix<double, Eigen::Dynamic, 1> linpred(m);
            stan::math::initialize(linpred, DUMMY_VAR__);
            stan::math::fill(linpred, DUMMY_VAR__);
            current_statement_begin__ = 21;
            validate_non_negative_index("betamu", "p", p);
            Eigen::Matrix<double, 1, Eigen::Dynamic> betamu(p);
            stan::math::initialize(betamu, DUMMY_VAR__);
            stan::math::fill(betamu, DUMMY_VAR__);
            // do transformed parameters statements
            current_statement_begin__ = 23;
            stan::math::assign(betamu, append_col(mu, beta));
            current_statement_begin__ = 24;
            stan::math::assign(linpred, multiply(X, transpose(betamu)));
            if (!include_gqs__ && !include_tparams__) return;
            // validate transformed parameters
            const char* function__ = "validate transformed params";
            (void) function__;  // dummy to suppress unused var warning
            // write transformed parameters
            if (include_tparams__) {
                size_t linpred_j_1_max__ = m;
                for (size_t j_1__ = 0; j_1__ < linpred_j_1_max__; ++j_1__) {
                    vars__.push_back(linpred(j_1__));
                }
                size_t betamu_j_1_max__ = p;
                for (size_t j_1__ = 0; j_1__ < betamu_j_1_max__; ++j_1__) {
                    vars__.push_back(betamu(j_1__));
                }
            }
            if (!include_gqs__) return;
        } catch (const std::exception& e) {
            stan::lang::rethrow_located(e, current_statement_begin__, prog_reader__());
            // Next line prevents compiler griping about no return
            throw std::runtime_error("*** IF YOU SEE THIS, PLEASE REPORT A BUG ***");
        }
    }
    template <typename RNG>
    void write_array(RNG& base_rng,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& params_r,
                     Eigen::Matrix<double,Eigen::Dynamic,1>& vars,
                     bool include_tparams = true,
                     bool include_gqs = true,
                     std::ostream* pstream = 0) const {
      std::vector<double> params_r_vec(params_r.size());
      for (int i = 0; i < params_r.size(); ++i)
        params_r_vec[i] = params_r(i);
      std::vector<double> vars_vec;
      std::vector<int> params_i_vec;
      write_array(base_rng, params_r_vec, params_i_vec, vars_vec, include_tparams, include_gqs, pstream);
      vars.resize(vars_vec.size());
      for (int i = 0; i < vars.size(); ++i)
        vars(i) = vars_vec[i];
    }
    std::string model_name() const {
        return "model_IndSourceLogist";
    }
    void constrained_param_names(std::vector<std::string>& param_names__,
                                 bool include_tparams__ = true,
                                 bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = (p - 1);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "omega";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t linpred_j_1_max__ = m;
            for (size_t j_1__ = 0; j_1__ < linpred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "linpred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t betamu_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < betamu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "betamu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
    void unconstrained_param_names(std::vector<std::string>& param_names__,
                                   bool include_tparams__ = true,
                                   bool include_gqs__ = true) const {
        std::stringstream param_name_stream__;
        size_t beta_j_1_max__ = (p - 1);
        for (size_t j_1__ = 0; j_1__ < beta_j_1_max__; ++j_1__) {
            param_name_stream__.str(std::string());
            param_name_stream__ << "beta" << '.' << j_1__ + 1;
            param_names__.push_back(param_name_stream__.str());
        }
        param_name_stream__.str(std::string());
        param_name_stream__ << "mu";
        param_names__.push_back(param_name_stream__.str());
        param_name_stream__.str(std::string());
        param_name_stream__ << "omega";
        param_names__.push_back(param_name_stream__.str());
        if (!include_gqs__ && !include_tparams__) return;
        if (include_tparams__) {
            size_t linpred_j_1_max__ = m;
            for (size_t j_1__ = 0; j_1__ < linpred_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "linpred" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
            size_t betamu_j_1_max__ = p;
            for (size_t j_1__ = 0; j_1__ < betamu_j_1_max__; ++j_1__) {
                param_name_stream__.str(std::string());
                param_name_stream__ << "betamu" << '.' << j_1__ + 1;
                param_names__.push_back(param_name_stream__.str());
            }
        }
        if (!include_gqs__) return;
    }
}; // model
}  // namespace
typedef model_IndSourceLogist_namespace::model_IndSourceLogist stan_model;
#ifndef USING_R
stan::model::model_base& new_model(
        stan::io::var_context& data_context,
        unsigned int seed,
        std::ostream* msg_stream) {
  stan_model* m = new stan_model(data_context, seed, msg_stream);
  return *m;
}
#endif
#endif
